import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(
    page_icon="üìé",
    layout="wide"
)

# Sidebar: filtros sin selector de tema
st.sidebar.title("üîß Configuraci√≥n")

# Cargar datos
archivo_csv = 'static/datasets/tecnologia_registros.csv'
df = pd.read_csv(archivo_csv)

# Sidebar: filtros
st.sidebar.header("üéØ Filtros Interactivos")

nombre = st.sidebar.text_input("üîç Buscar por Nombre:")

especialidad = st.sidebar.selectbox(
    "üë®‚Äçüíª Especialidad Tecnol√≥gica:",
    ["Todos"] + sorted(df["Especialidad tecnol√≥gica"].dropna().unique())
)

lenguaje = st.sidebar.selectbox(
    "üíª Lenguaje Favorito:",
    ["Todos"] + sorted(df["Lenguaje favorito"].dropna().unique())
)

certificacion = st.sidebar.selectbox(
    "üìú Certificaci√≥n:",
    ["Todos"] + sorted(df["Certificaci√≥n principal"].dropna().unique())
)

experiencia = st.sidebar.slider(
    "‚ö° A√±os de Experiencia:",
    int(df["A√±os de experiencia"].min()),
    int(df["A√±os de experiencia"].max()),
    (int(df["A√±os de experiencia"].min()), int(df["A√±os de experiencia"].max()))
)

salario = st.sidebar.slider(
    "üí∞ Rango Salarial (USD):",
    int(df["Salario actual (USD)"].min()),
    int(df["Salario actual (USD)"].max()),
    (int(df["Salario actual (USD)"].min()), int(df["Salario actual (USD)"].max()))
)

certificaciones = st.sidebar.slider(
    "üèÜ N√∫mero de Certificaciones:",
    int(df["N√∫mero de certificaciones t√©cnicas"].min()),
    int(df["N√∫mero de certificaciones t√©cnicas"].max()),
    (int(df["N√∫mero de certificaciones t√©cnicas"].min()), int(df["N√∫mero de certificaciones t√©cnicas"].max()))
)

repositorios = st.sidebar.slider(
    "üì¶ Repositorios en GitHub:",
    int(df["Repositorios en GitHub"].min()),
    int(df["Repositorios en GitHub"].max()),
    (int(df["Repositorios en GitHub"].min()), int(df["Repositorios en GitHub"].max()))
)

# Aplicar filtros
df_filtrado = df[
    (df["A√±os de experiencia"] >= experiencia[0]) & (df["A√±os de experiencia"] <= experiencia[1]) &
    (df["Salario actual (USD)"] >= salario[0]) & (df["Salario actual (USD)"] <= salario[1]) &
    (df["N√∫mero de certificaciones t√©cnicas"] >= certificaciones[0]) & (df["N√∫mero de certificaciones t√©cnicas"] <= certificaciones[1]) &
    (df["Repositorios en GitHub"] >= repositorios[0]) & (df["Repositorios en GitHub"] <= repositorios[1])
]

if nombre:
    df_filtrado = df_filtrado[df_filtrado["Nombre"].str.contains(nombre, case=False)]

if especialidad != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Especialidad tecnol√≥gica"] == especialidad]

if lenguaje != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Lenguaje favorito"] == lenguaje]

if certificacion != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Certificaci√≥n principal"] == certificacion]

# Encabezado elegante
st.markdown("""
<div style="background: linear-gradient(90deg, #374785, #24305E); 
            padding:10px; 
            border-radius:10px; 
            text-align:center;">
    <h1 style="color:white;">üìä Dashboard de Tecnolog√≠a üìä</h1>
</div>
""", unsafe_allow_html=True)

# Mostrar DataFrame filtrado
st.markdown("<h2 style='text-align: center;'>üìÅ Resultados Filtrados</h2>", unsafe_allow_html=True)
st.dataframe(df_filtrado, use_container_width=True)

# Gr√°ficos
st.markdown("<h2 style='text-align: center;'>üìà An√°lisis Visual</h2>", unsafe_allow_html=True)
col1, col2 = st.columns(2)

# Gr√°fico barras
fig_bar = px.bar(df_filtrado, x="Lenguaje favorito", y="N√∫mero de certificaciones t√©cnicas", color="Especialidad tecnol√≥gica",
                 title="Certificaciones T√©cnicas por Lenguaje")
col1.plotly_chart(fig_bar, use_container_width=True)

# Histograma
fig_hist = px.histogram(df_filtrado, x="A√±os de experiencia", nbins=20, color="Especialidad tecnol√≥gica",
                        title="Histograma de A√±os de Experiencia")
col2.plotly_chart(fig_hist, use_container_width=True)

# Densidad (KDE)
fig_kde = px.histogram(df_filtrado, x="Salario actual (USD)", color="Especialidad tecnol√≥gica",
                       histnorm='density', marginal="rug", nbins=30,
                       title="Distribuci√≥n de Salarios (Densidad)")
st.plotly_chart(fig_kde, use_container_width=True)

# Pie chart
fig_pie = px.pie(df_filtrado, names="Especialidad tecnol√≥gica", values="N√∫mero de certificaciones t√©cnicas",
                 title="Distribuci√≥n de Especialidades")
st.plotly_chart(fig_pie, use_container_width=True)

# Mapa de calor correlaci√≥n
corr = df_filtrado[[
    "A√±os de experiencia", "Salario actual (USD)", "N√∫mero de certificaciones t√©cnicas", "Repositorios en GitHub"
]].corr()

fig_heat = px.imshow(corr, text_auto=True, color_continuous_scale='RdBu_r', title="Mapa de Calor: Correlaci√≥n Variables")
st.plotly_chart(fig_heat, use_container_width=True)

# Waterfall
fig_waterfall = go.Figure(go.Waterfall(
    name="Waterfall",
    orientation="v",
    measure=["relative", "relative", "total"],
    x=["Certificaciones T√©cnicas", "Repositorios GitHub", "Total"],
    text=["+", "+", ""],
    y=[
        df_filtrado["N√∫mero de certificaciones t√©cnicas"].sum(),
        df_filtrado["Repositorios en GitHub"].sum(),
        0
    ],
    connector={"line":{"color":"rgb(63, 63, 63)"}}
))
fig_waterfall.update_layout(title="Gr√°fico Waterfall: Certificaciones y Repositorios")
st.plotly_chart(fig_waterfall, use_container_width=True)

# Pareto
df_pareto = df_filtrado.groupby("Especialidad tecnol√≥gica")["N√∫mero de certificaciones t√©cnicas"].sum().sort_values(ascending=False)
df_pareto = df_pareto.reset_index()
df_pareto["Porcentaje"] = 100 * df_pareto["N√∫mero de certificaciones t√©cnicas"] / df_pareto["N√∫mero de certificaciones t√©cnicas"].sum()
df_pareto["Porcentaje acumulado"] = df_pareto["Porcentaje"].cumsum()

fig_pareto = go.Figure()
fig_pareto.add_trace(go.Bar(
    x=df_pareto["Especialidad tecnol√≥gica"],
    y=df_pareto["N√∫mero de certificaciones t√©cnicas"],
    name="Certificaciones T√©cnicas"
))
fig_pareto.add_trace(go.Scatter(
    x=df_pareto["Especialidad tecnol√≥gica"],
    y=df_pareto["Porcentaje acumulado"],
    name="Porcentaje acumulado",
    yaxis="y2",
    mode="lines+markers"
))
fig_pareto.update_layout(
    title="Gr√°fico Pareto: Certificaciones T√©cnicas por Especialidad",
    yaxis=dict(title="N√∫mero de Certificaciones"),
    yaxis2=dict(title="Porcentaje acumulado", overlaying="y", side="right", range=[0, 110]),
    legend=dict(x=0.8, y=1.1)
)
st.plotly_chart(fig_pareto, use_container_width=True)
